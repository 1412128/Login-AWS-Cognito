{"version":3,"sources":["FormSignIn.js","FormSignUp.js","App.js","index.js"],"names":["FormSignIn","props","useState","username","setUsername","password","setPassword","code","setCode","isSignedIn","setActiveSignIn","user","setUser","className","type","name","value","onChange","e","target","onClick","Auth","confirmSignIn","then","data","updateStep","step","console","log","catch","err","resendSignUp","signIn","challengeName","FormSignUp","email","setEmail","nickname","setNickname","isSignedUp","confirmSignUp","forceAliasCreation","signUp","attributes","validationData","Amplify","configure","region","userPoolId","userPoolWebClientId","App","dataApp","setDataApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b56a163.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Auth } from \"aws-amplify\";\r\n\r\nfunction FormSignIn(props) {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [code, setCode] = useState(0);\r\n  const [isSignedIn, setActiveSignIn] = useState(false);\r\n  const [user, setUser] = useState(\"\");\r\n\r\n  const handleLogin = () => {\r\n    // You can pass an object which has the username, password and validationData which is sent to a PreAuthentication Lambda trigger\r\n    //   Auth.signIn({\r\n    //     username, // Required, the username\r\n    //     password, // Optional, the password\r\n    //     // validationData, // Optional, a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication\r\n    //   })\r\n    //     .then((user) => console.log(user))\r\n    //     .catch((err) => console.log(err));\r\n    Auth.signIn({\r\n      username, // Required, the username\r\n      password, // Optional, the password\r\n    })\r\n      .then((user) => {\r\n        if (\r\n          user.challengeName === \"SMS_MFA\" ||\r\n          user.challengeName === \"SOFTWARE_TOKEN_MFA\"\r\n        ) {\r\n          setUser(user);\r\n          setActiveSignIn(true);\r\n        } else {\r\n          props.updateStep({ step: 2 });\r\n          console.log(user);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleConfirmCode = () => {\r\n    Auth.confirmSignIn(\r\n      user, // Return object from Auth.signIn()\r\n      code, // Confirmation code\r\n      \"SMS_MFA\" // MFA Type e.g. SMS_MFA, SOFTWARE_TOKEN_MFA\r\n    )\r\n      .then((data) => {\r\n        props.updateStep({ step: 2 });\r\n        console.log(data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleResendCode = () => {\r\n    Auth.resendSignUp(username)\r\n      .then(() => {\r\n        console.log(\"code resent successfully\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  if (isSignedIn) {\r\n    return (\r\n      <div className=\"form\">\r\n        <label>Code:</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"code\"\r\n          value={code}\r\n          onChange={(e) => setCode(e.target.value)}\r\n        />\r\n        <button onClick={handleConfirmCode}>Confirm code</button>\r\n        <button onClick={handleResendCode}>Resend code</button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"form\">\r\n        <label>Username:</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <label>Passowrd:</label>\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <button onClick={handleLogin}>Login</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormSignIn;\r\n","import React, { useState } from \"react\";\r\nimport { Auth } from \"aws-amplify\";\r\n\r\nfunction FormSignUp(props) {\r\n  const [username, setUsername] = useState(\"mba-dang-dn\");\r\n  const [password, setPassword] = useState(\"2j%<4'G]/7f67%Xa\");\r\n  const [email, setEmail] = useState(\"doanngocdang1996@gmail.com\");\r\n  const [nickname, setNickname] = useState(\"DnDoan\");\r\n  const [code, setCode] = useState(0);\r\n  const [isSignedUp, setActiveSignUp] = useState(false);\r\n\r\n  const handleRegister = () => {\r\n    Auth.signUp({\r\n      username,\r\n      password,\r\n      attributes: {\r\n        email, // optional\r\n        // other custom attributes\r\n        nickname,\r\n      },\r\n      validationData: [], //optional\r\n    })\r\n      .then((data) => {\r\n        props.updateStep({ step: 1 });\r\n        console.log(data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleConfirmCode = () => {\r\n    Auth.confirmSignUp(username, code, {\r\n      // Optional. Force user confirmation irrespective of existing alias. By default set to True.\r\n      forceAliasCreation: true,\r\n    })\r\n      .then((data) => {\r\n        props.updateStep({ step: 1 });\r\n        console.log(data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleResendCode = () => {\r\n    Auth.resendSignUp(username)\r\n      .then(() => {\r\n        console.log(\"code resent successfully\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  if (isSignedUp) {\r\n    return (\r\n      <div className=\"form\">\r\n        <label>Code:</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"code\"\r\n          value={code}\r\n          onChange={(e) => setCode(e.target.value)}\r\n        />\r\n        <button onClick={handleConfirmCode}>Confirm code</button>\r\n        <button onClick={handleResendCode}>Resend code</button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"form\">\r\n        <label>Username:</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <label>Passowrd:</label>\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <label>Email:</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <label>Nickname:</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"nickname\"\r\n          value={nickname}\r\n          onChange={(e) => setNickname(e.target.value)}\r\n        />\r\n        <button onClick={handleRegister}>Register</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormSignUp;\r\n","import React, { useState } from \"react\";\n\nimport Amplify, { Auth } from \"aws-amplify\";\n\nimport FormSignIn from \"./FormSignIn\";\nimport FormSignUp from \"./FormSignUp\";\n\nAmplify.configure({\n  Auth: {\n    // REQUIRED only for Federated Authentication - Amazon Cognito Identity Pool ID\n    // identityPoolId: \"ap-southeast-1:d69597fb-86d6-42ea-913a-9e5ada197b1c\",\n\n    // REQUIRED - Amazon Cognito Region\n    region: \"ap-southeast-1\",\n\n    // OPTIONAL - Amazon Cognito Federated Identity Pool Region\n    // Required only if it's different from Amazon Cognito Region\n    // identityPoolRegion: \"ap-southeast-1\",\n\n    // OPTIONAL - Amazon Cognito User Pool ID\n    userPoolId: \"ap-southeast-1_B353BVmF8\",\n\n    // OPTIONAL - Amazon Cognito Web Client ID (26-char alphanumeric string)\n    userPoolWebClientId: \"64v6d06oliv9oi2gkpljqrphia\",\n  },\n});\nfunction App() {\n  const initDataApp = {\n    step: 1,\n    log: \"\",\n  };\n\n  const [dataApp, setDataApp] = useState(initDataApp);\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => setDataApp({ step: dataApp.step === 0 ? 1 : 0 })}>\n        Toggle\n      </button>\n      {dataApp.step === 0 && <FormSignUp updateStep={setDataApp} />}\n      {dataApp.step === 1 && <FormSignIn updateStep={setDataApp} />}\n      {dataApp.step === 2 && <h3>You have signed in.</h3>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}